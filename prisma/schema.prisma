// Prisma client generator
generator client {
  provider = "prisma-client-js"
}

// PostgreSQL datasource configuration
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")  // Ensure DATABASE_URL is set in your .env file
}

model Admin {
  id           Int                @id @default(autoincrement())
  name         String
  email        String             @unique(map: "Admin_email_unique")  // Custom constraint name
  passwordHash String
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  logs         FormActivityLog[]  // Logs of all admin activities (creating clients, managing forms, etc.)
  clients      Client[]           // Admin's clients (who they created)
}

model Client {
  id            Int               @id @default(autoincrement())
  name          String
  email         String?           @unique(map: "Client_email_unique") // Custom constraint name
  phone         String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  forms         FormSubmission[]  // Link to submitted forms
  progress      FormProgress[]    // Form progress tracking
  signatures    FormSignature[]   // Client signatures
  commonFields  CommonField[]     // Client's predefined common fields
  insights      Insight[]         // Insights related to the client
  createdBy     Admin?            @relation(fields: [createdById], references: [id]) // Admin who created the client
  createdById   Int?
  formBatches   FormBatch[]       // Batches of forms assigned to this client

  // Reverse relation for activities related to this client
  logs          FormActivityLog[]  // Client-related activity logs

  @@unique([email])  // Ensuring unique email (with custom name)
  FormAssignment FormAssignment[]
}

model MasterForm {
  id        Int      @id @default(autoincrement())
  formKey   String   @unique
  title     String
  version   Int      // Form version (e.g., 1, 2, 3)
  schema    Json     // JSON schema for the form structure
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Reverse relation for form submissions linked to this form
  formSubmissions FormSubmission[]

  // Reverse relation for form progress linked to this form
  formProgress    FormProgress[]

  // Unique combination of formKey and version
  @@unique([formKey, version])  
  FormAssignment FormAssignment[]
}

model FormBatch {
  id            Int       @id @default(autoincrement())
  clientId      Int
  batchToken    String    @unique  // Unique token for accessing all forms in this batch
  expiresAt     DateTime
  createdAt     DateTime  @default(now())
  
  client        Client    @relation(fields: [clientId], references: [id])
  assignments   FormAssignment[]
}

model FormAssignment {
  id                    Int       @id @default(autoincrement())
  clientId              Int       // Reference to Client
  formId                Int       // Reference to MasterForm
  formVersion           Int       // Version of the form being assigned
  assignedAt            DateTime  @default(now())
  expiresAt             DateTime  // When the assignment/link expires
  accessToken           String    @unique // Temporary access token
  isCompleted           Boolean   @default(false)
  passcode              String?   // Optional passcode for additional security
  isCommonFieldsCompleted Boolean @default(false) // Track if common fields are completed
  displayOrder          Int       @default(0) // Order in which forms should be displayed
  batchId               Int?      // Reference to FormBatch (optional)

  client                Client    @relation(fields: [clientId], references: [id])
  form                  MasterForm @relation(fields: [formId], references: [id])
  batch                 FormBatch? @relation(fields: [batchId], references: [id])

  // Ensure unique assignment for client-form-version
  @@unique([clientId, formId, formVersion])
}

model FormSubmission {
  id            Int      @id @default(autoincrement())
  clientId      Int      // Reference to Client
  formId        Int      // Reference to MasterForm
  formVersion   Int      // Version of the form being submitted
  data          Json     // JSON containing the form submission data
  isSubmitted   Boolean  @default(false)
  submittedAt   DateTime?
  updatedAt     DateTime @updatedAt

  client        Client   @relation(fields: [clientId], references: [id])
  form          MasterForm @relation(fields: [formId], references: [id])

  // Ensure each submission for a client-form combination is unique
  @@unique([clientId, formId, formVersion])
}

model FormProgress {
  id             Int      @id @default(autoincrement())
  clientId       Int
  formId         Int
  formVersion    Int      // Version of the form
  currentSection String?  // Current section the client is on
  updatedAt      DateTime @updatedAt

  client         Client   @relation(fields: [clientId], references: [id])
  form           MasterForm @relation(fields: [formId], references: [id])

  // Ensure unique progress tracking for client-form-version
  @@unique([clientId, formId, formVersion])
}

model FormSignature {
  id            Int      @id @default(autoincrement())
  clientId      Int
  signatureUrl  String   // URL to the client's signature image
  signedAt      DateTime @default(now()) // Timestamp when signed
  updatedAt     DateTime @updatedAt

  client        Client   @relation(fields: [clientId], references: [id])

  // One signature per client (for all forms)
  @@unique([clientId])  
}

model CommonField {
  id        Int      @id @default(autoincrement())
  clientId  Int      // Reference to the client
  name      String?  // Client's name
  age       Int?     // Client's age
  email     String?  // Client's email
  sex       String?
  street    String?
  state     String?
  postCode  String?
  dob       String?
  ndis      String?
  disability  String?
  address   String?  // Client's address
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  client    Client   @relation(fields: [clientId], references: [id])
  
  // Ensures one entry per client
  @@unique([clientId])
}

model Insight {
  id            Int      @id @default(autoincrement())
  clientId      Int      // Reference to the client
  client        Client   @relation(fields: [clientId], references: [id])
  age           Int?     // Example: Age of the client
  location      String?  // Example: Location of the client
  disability    String?  // Example: Disability information
  language      String?  // Example: Primary spoken language
  contractStart DateTime? // Example: Contract start date
  contractEnd   DateTime? // Example: Contract end date
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model FormActivityLog {
  id            Int      @id @default(autoincrement())
  clientId      Int?
  adminId       Int?
  logType       LogType  // Differentiates client actions from admin actions
  action        String   // Action performed (e.g., "Client Filled Form", "Admin Assigned Form")
  metadata      Json?    // Extra metadata related to the action (e.g., form details, section number)
  createdAt     DateTime @default(now())

  // Relations to Client and Admin models
  client        Client?  @relation(fields: [clientId], references: [id])
  admin         Admin?   @relation(fields: [adminId], references: [id])

  // Ensuring both types of logs (client and admin) can exist
  @@index([clientId, adminId]) // Indexing the client and admin fields for better search performance
}

// Enum for differentiating between client and admin logs
enum LogType {
  CLIENT
  ADMIN
}
